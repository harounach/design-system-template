@use "sass:map";
@use "sass:math";
@use "../abstracts/variables" as vars;
@use "../abstracts/mixins";

.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 1rem;
}

// row
.row {
  display: flex;
  flex-wrap: wrap;
}

// -------------- GRID -----------------
// Columns

@for $i from 1 through vars.$grid-columns {
  .col-#{$i} {
    flex: 0 0 auto;
    width: math.percentage(math.div($i, vars.$grid-columns));
  }
}

// Generate breakpoint columns
@each $breakpoint in map.keys(vars.$breakpoints) {
  @include mixins.breakpoint($breakpoint) {
    @for $i from 1 through vars.$grid-columns {
      .col-#{$breakpoint}-#{$i} {
        flex: 0 0 auto;
        width: math.percentage(math.div($i, vars.$grid-columns));
      }
    }
  }
}

// gaps (gutters)

@each $gap in map.keys(vars.$spaces) {
  .gap-#{$gap} {
    margin-top: -1 * map.get(vars.$spaces, $gap);
    margin-left: -0.5 * map.get(vars.$spaces, $gap);
    margin-right: -0.5 * map.get(vars.$spaces, $gap);

    > [class*="col-"] {
      padding-right: 0.5 * map.get(vars.$spaces, $gap);
      padding-left: 0.5 * map.get(vars.$spaces, $gap);
      margin-top: map.get(vars.$spaces, $gap);
    }
  }
}

@each $breakpoint in map.keys(vars.$breakpoints) {
  @include mixins.breakpoint($breakpoint) {
    @each $gap in map.keys(vars.$spaces) {
      .gap-#{$breakpoint}-#{$gap} {
        margin-top: -1 * map.get(vars.$spaces, $gap);
        margin-left: -0.5 * map.get(vars.$spaces, $gap);
        margin-right: -0.5 * map.get(vars.$spaces, $gap);

        > [class*="col-"] {
          padding-right: 0.5 * map.get(vars.$spaces, $gap);
          padding-left: 0.5 * map.get(vars.$spaces, $gap);
          margin-top: map.get(vars.$spaces, $gap);
        }
      }
    }
  }
}
